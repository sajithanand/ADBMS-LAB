											EXPERIMENT 7--SELECT QUERY 2--(DATE-7/05/2022)
                                                                                        -------------------------------------------------------------------------------
DML- SELECT QUERY 2 (GROUP BY, AGGREGATE FUNCTIONS)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1)List product name, price except soap on price order. 

mysql> SELECT * FROM PRODUCT;
+-----+------------+-------+
| PID | PNAME      | PRICE |
+-----+------------+-------+
|   1 | HORLICKS   |   204 |
|   2 | BOOST      |   100 |
|   3 | COMPLAN    |   122 |
|   4 | BONVITA    |   235 |
|   5 | CORNFLAKES |    82 |
|   6 | SOAP       |    80 |
+-----+------------+-------+
6 rows in set (0.00 sec)

mysql> SELECT PNAME,PRICE FROM PRODUCT WHERE PNAME !='SOAP' ORDER BY PRICE;
+------------+-------+
| PNAME      | PRICE |
+------------+-------+
| CORNFLAKES |    82 |
| BOOST      |   100 |
| COMPLAN    |   122 |
| HORLICKS   |   204 |
| BONVITA    |   235 |
+------------+-------+
5 rows in set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2Find minimum, maximum and average price of products. 

mysql> SELECT MIN(PRICE),MAX(PRICE),AVG(PRICE) FROM PRODUCT;
+------------+------------+------------+
| MIN(PRICE) | MAX(PRICE) | AVG(PRICE) |
+------------+------------+------------+
|         80 |        235 |   137.1667 |
+------------+------------+------------+
1 row in set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Find number of customers in each city. 


mysql> SELECT CITY, COUNT(NAME) FROM CUSTOMER GROUP BY CITY;
+-----------+-------------+
| CITY      | COUNT(NAME) |
+-----------+-------------+
| CLT       |           3 |
| EKM       |           1 |
| IDY       |           1 |
| KANNUR    |           3 |
| KOZHIKODE |           1 |
| TAMILNADU |           1 |
| THISSUR   |           1 |
| TVM       |           2 |
+-----------+-------------+
8 rows in set (0.00 sec)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4)Find number of customers in each city, only include city with more than 3 customers. 

mysql> SELECT CITY, COUNT(NAME) FROM CUSTOMER GROUP BY CITY HAVING COUNT(CITY) >=3;
+--------+-------------+
| CITY   | COUNT(NAME) |
+--------+-------------+
| CLT    |           4 |
| KANNUR |           3 |
+--------+-------------+
2 rows in set (0.03 sec)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)Show data as displayed ‘who, where’ Eg: ‘customer1 lives in ekm’.

mysql> SELECT CONCAT(NAME, "  LIVES IN  " ,CITY) AS CUST_INFO FROM CUSTOMER;
+---------------------------+
| CUST_INFO                 |
+---------------------------+
| ARJUN  LIVES IN  CLT      |
| ASWIN  LIVES IN  KANNUR   |
| ABIN  LIVES IN  THISSUR   |
| MANU  LIVES IN  KOZHIKODE |
| SHIBU  LIVES IN  IDY      |
| MAYAN  LIVES IN  EKM      |
| SUGHUNAN  LIVES IN  TVM   |
| NANU  LIVES IN  CLT       |
| MALU  LIVES IN  TVM       |
| ARCHANA  LIVES IN  CLT    |
| ARYA  LIVES IN  KANNUR    |
| MALIK  LIVES IN  KANNUR   |
| NANDU  LIVES IN  CLT      |
+---------------------------+
13 rows in set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// VERIFIED



















